@page "/login"
@using Common.DataStructure;
@using Common.Utilitary;
@using Frontend.Src.Authentication;
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject Blazored.SessionStorage.ISessionStorageService session

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="username" class="form-control" placeholder="User Name" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="password" type="password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@code {
    string username = "";
    string password = "";
    User user = new();
    Request request = new();


    private async Task Authenticate()
    {
        password = Hashing.GetHash(password);
        user = await request.GetUserData(username,password);
        password = "";
        username = "";
        if (user.Username == null || user.Username == "")
        {
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }

        await session.SetItemAsync("UserData", user);


        var customAuthStateProvider = (CustomAuthStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new User
            {
                Username = user.Username,
            });
        navManager.NavigateTo("/", true);
    }
}
