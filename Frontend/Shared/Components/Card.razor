@using Common.DataStructure;
@using System.Text.Json;
@using Common.Utilitary;
@inject Blazored.SessionStorage.ISessionStorageService session
<div class="card m-3" style="min-width: 18rem; max-width:30.5%;background-image:none;background-color:#EEF5F5;">

    <div class="card-header" style="background-image:none;background-color:#EEF5F5;"><h3 class="text-center">@product.Name</h3></div>
    <img class="card-img-top imageThumbnail" src="@product.ImageBase64" />
    <div class="card-body text-center"><b>@product.Description</b></div>

    @if (product.Discount > 0)
    {
        <div class="card-body text-center text-capitalize">
            Price: <del class="text-danger"><b>@product.Price</b></del>    @(product.Price - (product.Price * product.Discount / 100)) Ron
        </div>
    }
    else
    {
        <div class="card-body text-center text-capitalize">Price: @product.Price  Ron</div>
    }
    <div class="card-footer text-center" style="background-image:none;background-color:#EEF5F5;">
        <button class="btn btn-primary m-1" onclick="@(async()=>await AddItemToUserCart())" >Add to  cart</button>
    </div>
</div>
@code {
    [Parameter]
    public Product product {get;set;} = new();

    private Request request = new();
    public async Task AddItemToUserCart()
    {
        User user = await session.GetItemAsync<User>("UserData");
        List<Product> productList = await request.GetUserProductList(user.Username);
        productList.Add(product);
        user.ShoppingCartProducts = productList;
        await request.UpdateUserShoppingCart(user);
    }

}
